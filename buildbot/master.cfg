#!/usr/bin/env python
# -*- python -*-
# vim: syntax=python

### basis for the revision string
base_rev_major = "0."
base_rev = base_rev_major
master_repo = 'git://springlobby.info/git/buildbot/springlobby.git'
personal_repo = 'git://springlobby.info/git/%s/springlobby.git'
active_devs = ['BrainDamage','koshi']

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
from spring import SpringNotifier

#import the pw vars from another file. this way we can keep config in git
import pw

#c['slaves'].append(BuildSlave("testbot", pw.my_pw, max_builds=1))
c['slaves'].append(BuildSlave("release-slave", pw.release_slave_pw, max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave", pw.koshi_springlobby_slave_pw, max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave2", pw.koshi_springlobby_slave2_pw, max_builds=1))
c['slaves'].append(BuildSlave("documentation", pw.documentation_pw, max_builds=1))
c['slavePortnum'] = 9989

### CONFIGS

commom_win_opts = " -DOPTION_SOUND=OFF -DCMAKE_TOOLCHAIN_FILE:STRING=../cmake/Toolchain-mingw32_new.cmake -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DAUX_VERSION:STRING=msw -DENABLE_DEBUG_REPORT=ON -DCMAKE_EXE_LINKER_FLAGS:STRING=-L/opt/mingw32/lib"
no_opti  = " -DCMAKE_CXX_FLAGS:STRING=-O0 "
build_configs = dict() # name -> options_string
build_configs['msw-default']  = "" + commom_win_opts
build_configs['msw-no-torrent']  = ""  + commom_win_opts + no_opti
build_configs['msw-no-optionals']  = ""  + commom_win_opts + no_opti

build_configs['linux-default']  = "" + no_opti
build_configs['linux-no-torrent']  = "-DCMAKE_BUILD_TYPE=RELWITHDEBINFO" + no_opti
build_configs['linux-no-optionals']  = "-DCMAKE_BUILD_TYPE=PROFILE" + no_opti

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

##FIXME
"""from buildbot.scheduler import Scheduler
c['schedulers'].append(Scheduler(
      name="releaseScheduler",
      branch=None,
      treeStableTimer=60,
      builderNames=["release"]))"""

####### BUILDERS

# TODO: git-remote add -f my-public /srv/git/buildbot/springlobby.git is done for the release slave manually

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

class BuildDocs(ShellCommand) :
	name = "execute doxygen"
	description = ["generating doxygen documentation"]
	descriptionDone = ["docs generated"]
	command = ["/bin/sh","./tools/update-docs.sh"]

class UploadTranslations(ShellCommand) :
	name = "UploadTranslations"
	description = ["Upload translations"]
	descriptionDone = ["translations uploaded"]
	command = ["sl-update-translations","po/springlobby.pot"]

class WindowsInstaller(ShellCommand) :
	name = "putting installer files"
	description = ["putting installer files"]
	descriptionDone = ["installer files copied"]
	command = ["cp", "-f","build-msw-default/springlobby_updater.exe" ,"build-msw-default/springsettings.exe" ,"build-msw-default/springlobby.exe", "/usr/local/www/springlobby.info/installer/" ]

class WindowsBinary(ShellCommand) :
	name = "windows binary"
	description = ["making windows binary"]
	descriptionDone = ["windows binary"]
	command = ["zip", "-jr", WithProperties("build-msw-default/springlobby-"+base_rev+"%(buildnumber)s-win32.zip"), "build-msw-default/wininst"]

class WindowsLocales(ShellCommand) :
	name = "windows locale"
	description = ["adding locales to win zip"]
	descriptionDone = ["windows locale added"]
	command = ["/bin/sh", "./tools/buildbot-add-locale-win-zip.sh", WithProperties("springlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseWin(ShellCommand) :
	name = "release windows binary"
	description = ["releasing windows binary"]
	descriptionDone = ["windows binary release"]
	command = ["/usr/bin/install","-t", "/usr/local/www/springlobby.info/windows/", WithProperties("build-msw-default/springlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseTarball(ShellCommand) :
	name = "release tarball"
	description = ["releasing tarball"]
	descriptionDone = ["tarball release"]
	command = ["/usr/bin/install", "-t", "/usr/local/www/springlobby.info/tarballs/", WithProperties("build-linux-default/springlobby-"+base_rev+"%(buildnumber)s.tar.gz"), WithProperties("build-linux-default/springlobby-"+base_rev+"%(buildnumber)s.tar.bz2")]

class RsyncStuff(ShellCommand) :
	name = "RSYNC stuff"
	description = ["rsycn tarball and windows zip"]
	descriptionDone = ["rsync done"]
	command =["rsync", "-lrvz", "/usr/local/www/springlobby.info/", "kosh@springlobby.info:/usr/local/www/springlobby.info/"]

class GitTag(ShellCommand) :
	name = "git tag"
	description = "git tagging"
	descriptionDone = "git tag"
	command = ["git","tag", "-a", "-m", WithProperties(base_rev+"%(buildnumber)s"),  WithProperties(base_rev+"%(buildnumber)s")]

class ReportNews(ShellCommand) :
	name = "report"
	description = "report"
	descriptionDone = "reported"
	command = ["/usr/bin/sl_report.py", WithProperties(base_rev+"%(buildnumber)s")]

class LatestZip(ShellCommand) :
	name = "latest zip"
	description = "latest zip"
	descriptionDone = "latest zip"
	command = ["/home/www-data/springlobby.info/windows/latest.sh", WithProperties(base_rev+"%(buildnumber)s")]

class PublishVersion(ShellCommand) :
	name = "publish version number"
	description = "publishing version"
	descriptionDone = "published version"
	command = ["/bin/bash", "-c", WithProperties("echo "+base_rev+"%(buildnumber)s > /usr/local/www/springlobby.info/version/current.txt")]

# TODO osc needs user/pass for opensuse build service
# but of course we can't set them here, so you have to do it manually the first time
class UpdateRPM(ShellCommand) :
	name = "update rpm"
	description = "updating rpm"
	descriptionDone = "updated rpm"
	command = ["/bin/bash", "./tools/update-rpm.sh", WithProperties(base_rev+"%(buildnumber)s")]

class UpdateTranslations(ShellCommand) :
	name = "update translations"
	description = "updating translations"
	descriptionDone = "updated translations"
	command = ["/bin/bash", "./tools/update-translations-buildbot.sh"]

class UploadTempBuild(ShellCommand) :
	name = "upload exe"
	def __init__(self, configname='linux-default',who='koshi',**kwargs):
		self.configname = configname
		self.who 		= who
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(who= who)
		self.description = "uploading exe"
		self.descriptionDone = "uploaded exe"
		self.command = ["/bin/bash", "./tools/upload-temp-win-build.sh", "build-%s"%configname, self.who, WithProperties("%s","branch")]

class UploadTempDebugBuild(ShellCommand) :
	name = "upload exe"
	def __init__(self, configname='linux-default',**kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.description = "uploading exe"
		self.descriptionDone = "uploaded exe"
		self.command = ["/bin/bash", "./tools/upload-temp-win-build_debug.sh", "build-%s"%configname, WithProperties("%s","branch")]

class AnnounceBuild(ShellCommand) :
	name = "announce"
	def __init__(self, who,**kwargs):
		self.who = who
		ShellCommand.__init__(self, **kwargs)
		self.addFactoryArguments(who= who)
		self.description = "announce build in #springlobby"
		self.descriptionDone = "announced"
		self.command = ["/usr/bin/sl_announce.py", who]

# common build config steps ---------------------------------------------@
class buildConfig(Compile):
	name = 'buildConfig'
	def __init__(self, configname='linux-default',**kwargs):
		self.configname = configname
		Compile.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)

		#self.name 			= self.configname + " build"
		self.description 	= ["building " + self.configname + " config"]
		self.descriptionDone	= ["built " + self.configname + " config"]
		self.command			= ['make' ,'-k', '-j4', '-C', 'build-%s'%(self.configname)]

# TODO fail and stop the build if this fails
class CreateBuildDir(ShellCommand) :
	name = "build dir create"

	def __init__(self, configname='linux-default',**kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)

		self.description = ["creating dir %s"%(self.configname)]
		self.descriptionDone = ["%s dir created"%(self.configname)]
		self.command = ["/bin/bash", "./buildbot/create-build-dirs.sh", self.configname, WithProperties(base_rev+"%(buildnumber)s") , build_configs[self.configname]]
# common build config steps ---------------------------------------------@

ft = BuildFactory()
ft.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))
for i in ['linux-default','msw-default']:
	ft.addStep(CreateBuildDir(i))
#ft.addStep(Compile(command=["make", "-C", "build-linux-default", "dist"]))
ft.addStep(Compile(command=["make", "-k", "-C", "build-linux-default", "distcheck"]))
ft.addStep(Compile(command=["make", "-k", "-C", "build-msw-default"]))
ft.addStep(Compile(command=["make", "-C", "build-msw-default", "pack"]))
ft.addStep(ReleaseTarball())
ft.addStep(ReleaseWin())
ft.addStep(GitTag())
# TODO of course this requires that someone manually set up git-remote my-public
ft.addStep(ShellCommand(command=["git","push", "--tags", "my-public"]))
ft.addStep(ShellCommand(command=["git","push", "my-public", "master"]))
ft.addStep(WindowsInstaller())
ft.addStep(PublishVersion())
ft.addStep(UpdateRPM())
#ft.addStep(RsyncStuff())
#ft.addStep(UploadTranslations())
ft.addStep(ReportNews())
ft.addStep(LatestZip())


bt = {'name': "release",
      'slavenames': ["release-slave"],
      'builddir': "release",
      'factory': ft,
      }
c['builders'].append(bt)

f2 = BuildFactory()
f2.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))
f2.addStep(BuildDocs())

b2 = {'name': "docs",
      'slavename': "documentation",
      'builddir': "docs",
      'factory': f2,
      }
c['builders'].append(b2)

class FullBuildFactory(BuildFactory):
	def __init__(self,dude):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%dude))
		for name in build_configs.keys():
			self.addStep( CreateBuildDir(name) )
			self.addStep( buildConfig(configname=name) )
		self.addStep(Compile(command=["make", "-j4","-C", "build-linux-default", "distcheck"]))

class WinTempBuildFactory(BuildFactory):
	def __init__(self, who):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%who))
		self.addStep( CreateBuildDir('msw-default') )
		self.addStep( buildConfig(configname='msw-default') )
		self.addStep(UploadTempBuild(configname='msw-default',who=who  ))
		self.addStep(AnnounceBuild( who  ))

class WinTempDebugBuildFactory(BuildFactory):
	def __init__(self, who):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%who))
		self.addStep( CreateBuildDir('msw-default') )
		self.addStep( buildConfig(configname='msw-default') )
		self.addStep(UploadTempBuild(configname='msw-default',who=who  ))
		self.addStep(AnnounceBuild( who  ))
		
for name in active_devs:
	c['builders'].append({'name': name,
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': name,
      'factory': FullBuildFactory(name)
     })
	c['builders'].append({'name': name+'-win',
      'slavenames': ["release-slave"],
      'builddir': name+'-win',
      'factory': WinTempBuildFactory(name)
     })

class DummyFactory(BuildFactory):
  def __init__(self, who):
    BuildFactory.__init__(self)

b00 = {'name': "dummy",
      'slavenames': ["koshi-springlobby-slave"],
      'builddir': "dummy",
      'factory': DummyFactory("koshi")
     }
#c['builders'].append(b00)    


####### STATUS TARGETS
from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
auth = (HTPasswdAuth('/home/buildbot/.htpasswd'))
authz = Authz(auth=auth,
	forceBuild='auth', # only authenticated users
	pingBuilder=True, # but anyone can do this
)
c['status'].append(WebStatus(http_port=8010, authz=authz))

#from buildbot.status import words
#c['status'].append(words.IRC(host="orwell.freenode.net", nick="springlobby",
#                             channels=["#springlobby"]))

from buildbot.status import client
c['status'].append(client.PBListener(9988))

from buildbot.status.mail import MailNotifier
#mn = MailNotifier(fromaddr="koshi@springlobby.info",builders=['release'],
#                       sendToInterestedUsers=False,
#                       extraRecipients=['releases@www.springlobby.info'])
bnames = ['koshi-win_dbg','dummy','tc','koshi','release','docs','BrainDamage','bd-win',
	'tobi','olemars','koshi-win_dbg','koshi-full','koshi-win','olemars-win','tc-win']
mn = SpringNotifier( builders=bnames,mode='all')
c['status'].append(mn)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "SpringLobby"
c['projectURL'] = "http://springlobby.info/"
c['buildbotURL'] = "http://buildbot.springlobby.info/"
