# -*- python -*-
# vim: syntax=python

# requires >=buildbot-0.76 with better-support-for-git.patch (http://buildbot.net/trac/ticket/130)
# the patch should be integrated into buildbot-0.77 when it is released
# I've also patched buildbot with a fix to the irc status bot generated urls
# missing "builders" in between, this should also be fixed in 0.77

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

####### BUILDSLAVES

# TODO we can't keep the REAL passwords in svn
# so it is put to this file manually outside svn

from buildbot.buildslave import BuildSlave
c['slaves'].append(BuildSlave("testbot", "not the real password", max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave", "not the real password", max_builds=1))
c['slaves'].append(BuildSlave("error323-springlobby-slave", "not the real password", max_builds=1))
c['slaves'].append(BuildSlave("gentoo-ebuild-slave", "not the real password", max_builds=1))
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'].append(Scheduler(
      name="releaseScheduler",
      branch=None,
      treeStableTimer=60,
      builderNames=["release"]))

####### BUILDERS

# TODO: git-remote add -f my-public /srv/git/buildbot/springlobby.git is done for the release slave manually

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

class WindowsBinary(ShellCommand) :
  name = "windows binary"
  description = ["making windows binary"]
  descriptionDone = ["windows binary"]
  command = ["zip", "-jr", WithProperties("build-mingw-wx28/springlobby-0.0.1.101%(buildnumber)s-win32.zip"), "build-mingw-wx28/wininst"]

class ReleaseWin(ShellCommand) :
  name = "release windows binary"
  description = ["releasing windows binary"]
  descriptionDone = ["windows binary release"]
  command = ["/usr/bin/install", "-t", "/srv/www/springlobby/windows/", WithProperties("build-mingw-wx28/springlobby-0.0.1.101%(buildnumber)s-win32.zip")]

class ReleaseTarball(ShellCommand) :
  name = "release tarball"
  description = ["releasing tarball"]
  descriptionDone = ["tarball release"]
  command = ["/usr/bin/install", "-t", "/srv/www/springlobby/tarballs/", WithProperties("build/springlobby-0.0.1.101%(buildnumber)s.tar.gz"), WithProperties("build/springlobby-0.0.1.101%(buildnumber)s.tar.bz2")]

# FIXME really fragile to configure.ac content
class VersionBump(ShellCommand) :
  name = "version bump"
  description = "bumping version"
  descriptionDone = "version bump"
  command = ["/bin/sed", "-i", WithProperties("s/0.0.1[^]]*/0.0.1.101%(buildnumber)s/"), "configure.ac"]

class GitTag(ShellCommand) :
  name = "git tag"
  description = "git tagging"
  descriptionDone = "git tag"
  command = ["git-tag", WithProperties("0.0.1.101%(buildnumber)s")]

class VersionClear(ShellCommand) :
  name = "version clear"
  description = "clearing version"
  descriptionDone = "version clear"
  command = ["/bin/rm", "-f", "configure.ac"]

class Autogen(ShellCommand) :
  name = "autogen.sh"
  description = "regenerating buildsystem"
  descriptionDone = "build system regenerated"
  command = ["./autogen.sh"]

# TODO fail and stop the build if this fails
class CreateBuildDirs(ShellCommand) :
  name = "build dir create"
  description = "creating build dirs"
  descriptionDone = "build dirs created"
  command = ["/bin/bash", "./tools/buildbot-create-build-dirs.sh"]

class PublishVersion(ShellCommand) :
  name = "publish version number"
  description = "publishing version"
  descriptionDone = "published version"
  command = ["/bin/bash", "-c", WithProperties("echo 0.0.1.101%(buildnumber)s > /srv/www/springlobby/version/latest.txt")]

# TODO osc needs user/pass for opensuse build service
# but of course we can't set them here, so you have to do it manually the first time

class UpdateRPM(ShellCommand) :
  name = "update rpm"
  description = "updating rpm"
  descriptionDone = "updated rpm"
  command = ["/bin/bash", "./tools/update-rpm.sh", WithProperties("0.0.1.101%(buildnumber)s")]

class UpdateEbuild(ShellCommand) :
  name = "update ebuilds"
  description = "updating ebuilds"
  descriptionDone = "updated ebuilds"
  command = ["/bin/bash", "./tools/update-ebuilds-slave.sh"]

f1 = BuildFactory()
f1.addStep(VersionClear())
f1.addStep(Git(repourl=("/srv/git/semi/springlobby.git")))
f1.addStep(Autogen())
f1.addStep(CreateBuildDirs())
f1.addStep(VersionBump())
f1.addStep(Compile(command=["make", "-k", "-C", "build"]))
f1.addStep(Compile(command=["make", "-k", "-C", "build-linux-wx28"]))
f1.addStep(Compile(command=["make", "-k", "-C", "build-mingw-wx28"]))
f1.addStep(Compile(command=["make", "-C", "build", "distcheck"]))
f1.addStep(Compile(command=["make", "-C", "build", "dist-bzip2"]))
f1.addStep(Compile(command=["make", "-C", "build-mingw-wx28", "install-strip", "DESTDIR=wininst"]))
f1.addStep(ReleaseTarball())
f1.addStep(WindowsBinary())
f1.addStep(ReleaseWin())
f1.addStep(GitTag())
# TODO of course this requires that someone manually set up git-remote my-public
f1.addStep(ShellCommand(command=["git-push", "--all", "--tags", "my-public"]))
f1.addStep(PublishVersion())
f1.addStep(UpdateRPM())

b1 = {'name': "release",
      'slavename': "testbot",
      'builddir': "release",
      'factory': f1,
      }
c['builders'].append(b1)

f3 = BuildFactory()
f3.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))
f3.addStep(UpdateEbuild())

b3 = {'name': "ebuilds",
      'slavename': "gentoo-ebuild-slave",
      'builddir': "ebuilds",
      'factory': f3
      }
c['builders'].append(b3)

class DeveloperBuildFactory(BuildFactory):
  def __init__(self, who):
    BuildFactory.__init__(self)
    self.addStep(VersionClear())
    self.addStep(Git(repourl=("/srv/git/" + who + "/springlobby.git")))
    self.addStep(Autogen())
    self.addStep(CreateBuildDirs())
    self.addStep(VersionBump())
    self.addStep(Compile(command=["make", "-k", "-C", "build"]))
    self.addStep(Compile(command=["make", "-k", "-C", "build-linux-wx28"]))
    self.addStep(Compile(command=["make", "-k", "-C", "build-mingw-wx28"]))
    self.addStep(Compile(command=["make", "-C", "build", "distcheck"]))

# TODO refactor!

b2 = {'name': "semi",
      'slavename': "testbot",
      'builddir': "semi",
      'factory': DeveloperBuildFactory("semi")
     }
c['builders'].append(b2)

b3 = {'name': "tc",
      'slavename': "testbot",
      'builddir': "tc",
      'factory': DeveloperBuildFactory("tc")
     }
c['builders'].append(b3)

b4 = {'name': "BrainDamage",
      'slavename': "testbot",
      'builddir': "BrainDamage",
      'factory': DeveloperBuildFactory("BrainDamage")
     }
c['builders'].append(b4)

b5 = {'name': "koshi",
      'slavename': "testbot",
      'builddir': "koshi",
      'factory': DeveloperBuildFactory("koshi")
     }
c['builders'].append(b5)

b6 = {'name': "Kaot",
      'slavename': "testbot",
      'builddir': "Kaot",
      'factory': DeveloperBuildFactory("Kaot")
     }
c['builders'].append(b6)

####### STATUS TARGETS

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(
      http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
from buildbot.status import words
c['status'].append(words.IRC(host="orwell.freenode.net", nick="springlobby",
                              channels=["#springlobby"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "SpringLobby"
c['projectURL'] = "http://springlobby.info"
c['buildbotURL'] = "http://buildbot.springlobby.info:8010/"

