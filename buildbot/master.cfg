# -*- python -*-
# vim: syntax=python

### basis for the revision string
base_rev_major = "0.0.1."
base_rev = base_rev_major+"104"

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

#import the pw vars from another file. this way we can keep config in git
import pw

#c['slaves'].append(BuildSlave("testbot", pw.my_pw, max_builds=1))
c['slaves'].append(BuildSlave("release-slave", pw.release_slave_pw, max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave", pw.koshi_springlobby_slave_pw, max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave2", pw.koshi_springlobby_slave2_pw, max_builds=1))
c['slaves'].append(BuildSlave("documentation", pw.documentation_pw, max_builds=1))
c['slavePortnum'] = 9989

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

##FIXME
from buildbot.scheduler import Scheduler
c['schedulers'].append(Scheduler(
      name="releaseScheduler",
      branch=None,
      treeStableTimer=60,
      builderNames=["release"]))

####### BUILDERS

# TODO: git-remote add -f my-public /srv/git/buildbot/springlobby.git is done for the release slave manually

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

class BuildDocs(ShellCommand) :
  name = "execute doxygen"
  description = ["generating doxygen documentation"]
  descriptionDone = ["docs generated"]
  command = ["/bin/sh","./tools/update-docs.sh"]

class UploadTranslations(ShellCommand) :
  name = "UploadTranslations"
  description = ["Upload translations"]
  descriptionDone = ["translations uploaded"]
  command = ["sl-update-translations","po/springlobby.pot"]


class WindowsInstaller(ShellCommand) :
  name = "putting installer files"
  description = ["putting installer files"]
  descriptionDone = ["installer files copied"]
  command = ["cp", "-f","/var/lib/buildbot/slaves/springlobby/release/build/build-mingw-wx28/wininst/usr/local/bin/springsettings.exe" ,"/var/lib/buildbot/slaves/springlobby/release/build/build-mingw-wx28/wininst/usr/local/bin/springlobby.exe", "/usr/local/www/springlobby.info/installer/" ]

class WindowsBinary(ShellCommand) :
  name = "windows binary"
  description = ["making windows binary"]
  descriptionDone = ["windows binary"]
  command = ["zip", "-jr", WithProperties("build-mingw-wx28/springlobby-"+base_rev+"%(buildnumber)s-win32.zip"), "build-mingw-wx28/wininst"]

class WindowsLocales(ShellCommand) :
  name = "windows locale"
  description = ["adding locales to win zip"]
  descriptionDone = ["windows locale added"]
  command = ["/bin/sh", "./tools/buildbot-add-locale-win-zip.sh", WithProperties("springlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseWin(ShellCommand) :
  name = "release windows binary"
  description = ["releasing windows binary"]
  descriptionDone = ["windows binary release"]
  command = ["/usr/bin/install","-t", "/usr/local/www/springlobby.info/windows/", WithProperties("build-mingw-wx28/springlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseTarball(ShellCommand) :
  name = "release tarball"
  description = ["releasing tarball"]
  descriptionDone = ["tarball release"]
  command = ["/usr/bin/install", "-t", "/usr/local/www/springlobby.info/tarballs/", WithProperties("build/springlobby-"+base_rev+"%(buildnumber)s.tar.gz"), WithProperties("build/springlobby-"+base_rev+"%(buildnumber)s.tar.bz2")]

class RsyncStuff(ShellCommand) :
  name = "RSYNC stuff"
  description = ["rsycn tarball and windows zip"]
  descriptionDone = ["rsync done"]
  command =["rsync", "-lrvz", "/usr/local/www/springlobby.info/", "kosh@springlobby.info:/usr/local/www/springlobby.info/"]

class GitTag(ShellCommand) :
  name = "git tag"
  description = "git tagging"
  descriptionDone = "git tag"
  command = ["git","tag", WithProperties(base_rev+"%(buildnumber)s")]

class ReportNews(ShellCommand) :
  name = "report"
  description = "report"
  descriptionDone = "reported"
  command = ["/usr/bin/sl_report.py", WithProperties(base_rev+"%(buildnumber)s")]

class AnnounceBuild(ShellCommand) :
  name = "announce"
  description = "announce build in #springlobby"
  descriptionDone = "announced"
  command = ["/usr/bin/sl_announce.py"]

class VersionClear(ShellCommand) :
  name = "version clear"
  description = "clearing version"
  descriptionDone = "version clear"
  command = ["/bin/rm", "-f", "configure.ac"]

class Autogen(ShellCommand) :
  name = "autogen.sh"
  description = "regenerating buildsystem"
  descriptionDone = "build system regenerated"
  command = ["./autogen.sh" ,WithProperties(base_rev+"%(buildnumber)s")]

# TODO fail and stop the build if this fails
class CreateBuildDirs(ShellCommand) :
  name = "build dir create"
  description = "creating build dirs"
  descriptionDone = "build dirs created"
  command = ["/bin/bash", "./tools/buildbot-create-build-dirs.sh"]

class PublishVersion(ShellCommand) :
  name = "publish version number"
  description = "publishing version"
  descriptionDone = "published version"
  command = ["/bin/bash", "-c", WithProperties("echo "+base_rev+"%(buildnumber)s > /usr/local/www/springlobby.info/version/latest.txt")]

# TODO osc needs user/pass for opensuse build service
# but of course we can't set them here, so you have to do it manually the first time

class UpdateRPM(ShellCommand) :
  name = "update rpm"
  description = "updating rpm"
  descriptionDone = "updated rpm"
  command = ["/bin/bash", "./tools/update-rpm.sh", WithProperties(base_rev+"%(buildnumber)s")]

class UpdateEbuild(ShellCommand) :
  name = "update ebuilds"
  description = "updating ebuilds"
  descriptionDone = "updated ebuilds"
  command = ["/bin/bash", "./tools/update-ebuilds-slave.sh"]

class UpdateTranslations(ShellCommand) :
  name = "update translations"
  description = "updating translations"
  descriptionDone = "updated translations"
  command = ["/bin/bash", "./tools/update-translations-buildbot.sh"]

class UploadTempBuild(ShellCommand) :
  name = "upload exe"
  description = "uploading exe"
  descriptionDone = "uploaded exe"
  command = ["/bin/bash", "./tools/upload-temp-win-build.sh", "build-mingw-wx28", WithProperties("%s","branch")]
#  command = ["cp", "-f","/var/lib/buildbot/slaves/springlobby/release/build/build-mingw-wx28/wininst/usr/local/bin/springlobby.exe", WithProperties("/usr/local/www/springlobby.info/temp/builds/sl-"+"%s"+".exe","branch") ]


f1 = BuildFactory()
#f1.addStep(VersionClear())
f1.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))
f1.addStep(Autogen())
f1.addStep(CreateBuildDirs())
#f1.addStep(UpdateTranslations())
f1.addStep(Compile(command=["make", "-k", "-C", "build"]))
f1.addStep(Compile(command=["make", "-k", "-C", "build-cmake"]))
f1.addStep(Compile(command=["make", "-k", "-C", "build-mingw-wx28"]))
f1.addStep(Compile(command=["make", "-C", "build", "distcheck"]))
f1.addStep(Compile(command=["make", "-C", "build", "dist-bzip2"]))
f1.addStep(Compile(command=["make", "-C", "build-mingw-wx28", "install-strip", "DESTDIR=wininst"]))
f1.addStep(ReleaseTarball())
f1.addStep(WindowsBinary())
f1.addStep(WindowsLocales())
f1.addStep(ReleaseWin())
f1.addStep(GitTag())
# TODO of course this requires that someone manually set up git-remote my-public
f1.addStep(ShellCommand(command=["git","push", "--tags", "my-public"]))
f1.addStep(ShellCommand(command=["git","push", "my-public", "master"]))
f1.addStep(WindowsInstaller())
f1.addStep(PublishVersion())
f1.addStep(UpdateRPM())
#f1.addStep(RsyncStuff())
#f1.addStep(UploadTranslations())
f1.addStep(ReportNews())


b1 = {'name': "release",
      'slavenames': ["release-slave"],
      'builddir': "release",
      'factory': f1,
      }
c['builders'].append(b1)

f2 = BuildFactory()
f2.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))
f2.addStep(BuildDocs())

b2 = {'name': "docs",
      'slavename': "documentation",
      'builddir': "docs",
      'factory': f2,
      }
##FIXME
c['builders'].append(b2)


f3 = BuildFactory()
f3.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))
f3.addStep(UpdateEbuild())

b3 = {'name': "ebuilds",
      'slavename': "koshi-ebuild-slave",
      'builddir': "ebuilds",
      'factory': f3
      }
##FIXME
#c['builders'].append(b3)

class DeveloperBuildFactory(BuildFactory):
  def __init__(self, who):
    BuildFactory.__init__(self)
    self.addStep(VersionClear())
    self.addStep(Git(repourl=("git://springlobby.info/git/" + who + "/springlobby.git")))
    self.addStep(Autogen())
    self.addStep(CreateBuildDirs())
#    self.addStep(VersionBump())
    self.addStep(Compile(command=["make", "-j4","-k", "-C", "build"]))
    self.addStep(Compile(command=["make", "-j4","-k", "-C", "build-mingw-wx28"]))
    self.addStep(Compile(command=["make", "-j4","-k", "-C", "build-cmake"]))
    self.addStep(Compile(command=["make", "-j4","-k", "-C", "build-cmake-win"]))
    self.addStep(Compile(command=["make", "-j4","-C", "build", "distcheck"]))

# TODO refactor!

b2 = {'name': "insaneinside",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "insaneinside",
      'factory': DeveloperBuildFactory("insaneinside")
     }
c['builders'].append(b2)

b3 = {'name': "tc",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'slavename': "koshi-springlobby-slave",
      'builddir': "tc",
      'factory': DeveloperBuildFactory("tc")
     }
c['builders'].append(b3)

b4 = {'name': "BrainDamage",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "BrainDamage",
      'factory': DeveloperBuildFactory("BrainDamage")
     }
c['builders'].append(b4)

b5 = {'name': "koshi",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "koshi",
      'factory': DeveloperBuildFactory("koshi")
     }
c['builders'].append(b5)

b6 = {'name': "Kaot",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "Kaot",
      'factory': DeveloperBuildFactory("Kaot")
     }
#c['builders'].append(b6)

b7 = {'name': "olemars",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "olemars",
      'factory': DeveloperBuildFactory("olemars")
     }
c['builders'].append(b7)

b8 = {'name': "tobi",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "tobi",
      'factory': DeveloperBuildFactory("tobi")
     }
c['builders'].append(b8)

b15 = {'name': "semi",
      'slavenames': ["koshi-springlobby-slave","koshi-springlobby-slave2"],
      'builddir': "semi",
      'factory': DeveloperBuildFactory("semi")
     }
c['builders'].append(b15)

class WinTempBuildFactory(BuildFactory):
  def __init__(self, who):
    BuildFactory.__init__(self)
    self.addStep(VersionClear())
    self.addStep(Git(repourl=("git://springlobby.info/git/" + who + "/springlobby.git")))
    self.addStep(Autogen())
    self.addStep(CreateBuildDirs())
    self.addStep(Compile(command=["make", "-j1","-k", "-C", "build-mingw-wx28"]))
    self.addStep(UploadTempBuild(env={'DEVELOPER': who}  ))
    self.addStep(AnnounceBuild(env={'DEVELOPER': who}  ))
    
b9 = {'name': "bd-win",
      'slavenames': ["release-slave"],
      'builddir': "bd-win",
      'factory': WinTempBuildFactory("BrainDamage")
     }
c['builders'].append(b9)    

b10 = {'name': "koshi-win",
      'slavenames': ["release-slave"],
      'builddir': "koshi-win",
      'factory': WinTempBuildFactory("koshi")
     }
c['builders'].append(b10)    

b11 = {'name': "insaneinside-win",
      'slavenames': ["release-slave"],
      'builddir': "insaneinside-win",
      'factory': WinTempBuildFactory("insaneinside")
     }
c['builders'].append(b11)    

b12 = {'name': "tobi-win",
      'slavenames': ["release-slave"],
      'builddir': "tobi-win",
      'factory': WinTempBuildFactory("tobi")
     }
c['builders'].append(b12)    

b13 = {'name': "olemars-win",
      'slavenames': ["release-slave"],
      'builddir': "olemars-win",
      'factory': WinTempBuildFactory("olemars")
     }
c['builders'].append(b13)    

b14 = {'name': "semi-win",
      'slavenames': ["release-slave"],
      'builddir': "semi-win",
      'factory': WinTempBuildFactory("semi")
     }
c['builders'].append(b14)    

####### STATUS TARGETS

#from buildbot.status.html import WebStatus
#c['status'].append(WebStatus(
#      http_port=8010))

#this is supposed to be in 0.80+
#from buildbot.status.web.authentication import *
#filen = '/usr/local/svn/svn.passwd' 
#from buildbot.status import html
#c['status'].append(html.WebStatus(http_port=8010, allowForce=True, auth=HTPasswdAuth(filen)))
#

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=False))
c['status'].append(html.WebStatus(http_port=8011, allowForce=True))

#from buildbot.status import words
#c['status'].append(words.IRC(host="orwell.freenode.net", nick="springlobby",
#                             channels=["#springlobby"]))

from buildbot.status import client
c['status'].append(client.PBListener(9988))

from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr="koshi@springlobby.info",builders=['release'],
                       sendToInterestedUsers=False,
                       extraRecipients=['releases@www.springlobby.info'])
#c['status'].append(mn)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "SpringLobby"
c['projectURL'] = "http://springlobby.info"
c['buildbotURL'] = "http://buildbot.springlobby.info:8010/"

